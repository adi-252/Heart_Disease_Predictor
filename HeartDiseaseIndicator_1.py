# -*- coding: utf-8 -*-
"""hackathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tAq0VlfjSMBPq38bmnZWfRNIF8Kt85KO
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import Perceptron
import pandas as pd
import imblearn
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA
from sklearn import svm
from sklearn.preprocessing import StandardScaler

filepath = r'./processed.cleveland.csv'

df_bin = pd.read_csv(filepath)
data_np = df_bin.to_numpy()  #convert to numpy

row, col = data_np.shape
data_labels = data_np[:,col - 1]
data = data_np[:,0:col - 1]

def get_class_data(x, data_labels): ##class 1: label 0, no default
                                    ##class 2: label 1, default
    class_1 = x[data_labels == 0]
    class_2 = x[data_labels == 1]
    class_3 = x[data_labels == 2]
    class_4 = x[data_labels == 3]
    class_5 = x[data_labels == 4]


    return class_1, class_2, class_3, class_4, class_5

class_1, class_2, class_3, class_4, class_5 = get_class_data(data, data_labels)
print(len(class_1))
print(len(class_2))
print(len(class_3))
print(len(class_4))
print(len(class_5))

data_labels = data_labels.astype('int')

for i in range(len(data_labels)):
    if(data[i,11] != '?'):
        data[i,11] = float(data[i,11])
    else:
        data[i,11] =  0.0

for i in range(len(data_labels)):
    if(data[i,12] != '?'):
        data[i,12] = float(data[i,12])
    else:
        data[i,12] =  0.0

oversample = SMOTE()
x, y = oversample.fit_resample(data, data_labels)

cl1, cl2, cl3, cl4, cl5 = get_class_data(x,y)

scalar_  = StandardScaler()
data_stand = scalar_.fit_transform(data)

X_train, X_test, y_train, y_test = train_test_split(data, data_labels, test_size=0.2, random_state=42)

x_train, x_test, y_train, y_test = train_test_split(data_stand, data_labels, test_size=0.2, random_state=42)

classifier = svm.SVC(kernel = "rbf", C = 3)
classifier.fit(x,y)

#w_ = classifier.coef_
#w_0 = classifier.intercept_
#sv_ = classifier.support_vectors_
#y_pred = classifier.predict(x)
accuracy = classifier.score(x_train, y_train)
acc_test = classifier.score(x_test,y_test)
